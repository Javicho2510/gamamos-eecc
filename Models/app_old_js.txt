import { useEffect, useState } from "react";
import jsPDF from "jspdf";
//import "jspdf-autotable";
import autoTable from "jspdf-autotable"; 

export default function App() {
  const [estadoCuenta, setEstadoCuenta] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [nroDoc, setNroDoc] = useState(""); 
  const [idCliente, setIdCliente] = useState(null); 
  const [inmuebles, setInmuebles] = useState([]);
  const [idInmuebleSeleccionado, setIdInmuebleSeleccionado] = useState("");

 // ✅ Función para formatear fecha (DÍA/MES/AÑO)
 const formatearFecha = (fecha) => {
  if (!fecha) return "-";
  const d = new Date(fecha);
  if (isNaN(d)) return "-";

  const dia = String(d.getDate()).padStart(2, "0");
  const mes = String(d.getMonth() + 1).padStart(2, "0"); // Los meses empiezan en 0
  const anio = d.getFullYear();

  return `${dia}/${mes}/${anio}`; // 🔥 Formato 0000/00/00
};

  const buscarCliente = async () => {
    if (!nroDoc.trim()) {
      setError("Debe ingresar un número de documento");
      return;
    }

    setError(null);
    setLoading(true);

    try {
      const res = await fetch(
        `http://192.168.100.19:5169/api/clientes/buscar?nroDoc=${nroDoc}`
      );
      if (!res.ok) throw new Error("Cliente no encontrado");

      const data = await res.json();
      setIdCliente(data.idcliente);

      const resInm = await fetch(
        `http://192.168.100.19:5169/api/EstadoCuenta/inmuebles-por-cliente?idcliente=${data.idcliente}`
      );
      if (!resInm.ok) throw new Error("No se pudieron cargar los inmuebles");

      const dataInm = await resInm.json();
      setInmuebles(dataInm);

      if (dataInm.length > 0) {
        setIdInmuebleSeleccionado(dataInm[0].idInmueble);
      }
    } catch (err) {
      setError(err.message);
      setIdCliente(null);
      setInmuebles([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!idInmuebleSeleccionado) return;

    setLoading(true);
    fetch(
      `http://192.168.100.19:5169/api/EstadoCuenta?idinmueble=${idInmuebleSeleccionado}`
    )
      .then((res) => res.json())
      .then((data) => setEstadoCuenta(data))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [idInmuebleSeleccionado]);

  const generarPDF = () => {
    const doc = new jsPDF();

    doc.setFontSize(16);
    doc.text("Estado de Cuenta", 14, 15);
    doc.setFontSize(11);
    doc.text(`DNI/RUC: ${nroDoc}`, 14, 25);
    doc.text(`Fecha: ${new Date().toLocaleDateString()}`, 150, 25);

    const columnas = [
      "Año",
      "Periodo",
      "Local",
      "Serie",
      "Comprobante",
      "F.Emisión",
      "Importe",
      "F.Pago",
      "T.Pago",
      "Importe Pago",
      "Saldo",
    ];

    const filas = estadoCuenta.map((item) => {
    const importeFac = parseFloat(item.importeFac ?? 0);
    const importeCob = parseFloat(item.importeCob ?? 0);
    const saldo = importeFac - importeCob;

    return [
      item.anio ?? "-",
      item.descPeriodo ?? "-",
      item.codInmueble ?? "-",
      item.nroSerie ?? "-",
      item.nroComprob ?? "-",
      formatearFecha(item.fechaEmision) ?? "-",
      importeFac.toFixed(2),
      formatearFecha(item.fechaCob) ?? "-",
      item.tipoPago ?? "-",
      importeCob.toFixed(2),
      saldo.toFixed(2),
    ];
  });

  autoTable(doc, {
    startY: 35,
    head: [columnas],
    body: filas,
    styles: { fontSize: 8 },
    headStyles: { fillColor: [30, 64, 175] },
    columnStyles: {
      0: { halign: "center" }, // Año centrado
      1: { halign: "center" }, // Periodo centrado
      2: { halign: "center" }, // Local centrado
      3: { halign: "center" }, // Serie centrado
      4: { halign: "center" }, // Comprobante centrado
      5: { halign: "center" }, // Fecha Emisión centrada
      6: { halign: "right" },  // Importe a la derecha
      7: { halign: "center" }, // Fecha Pago centrada
      8: { halign: "center" }, // Tipo Pago centrado
      9: { halign: "right" },  // Importe Pago a la derecha
      10: { halign: "right" }  // Saldo a la derecha
    }
  });


    doc.save(`estado_cuenta_${nroDoc}.pdf`);
  };

  return (
    <div className="p-6">
      <h1 className="text-xl font-bold mb-4">Estado de Cuenta</h1>

      {/* 🔎 Campo para ingresar nroDoc */}
      <div className="mb-4 flex gap-2">
        <label className="block mb-1 font-semibold text-gray-700">
          Ingresar DNI/RUC:
        </label>
        <input
          type="text"
          placeholder="Ingrese N° Documento"
          value={nroDoc}
          onChange={(e) => setNroDoc(e.target.value)}
          className="border rounded p-2 flex-1"
        />
        <button
          onClick={buscarCliente}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Buscar
        </button>
      </div>

      {error && <p className="text-red-500">{error}</p>}

      {loading && <p>Cargando...</p>}

	{inmuebles.length > 0 && (
  	<div className="mb-4">
    	<label className="block mb-1 font-medium">Seleccione Inmueble:</label>
   	 <select
   	   value={idInmuebleSeleccionado}
   	   onChange={(e) => setIdInmuebleSeleccionado(e.target.value)}
  	    className="border rounded p-2 w-full"
  	  >
  	    {inmuebles.map((i) => (
   	     <option key={i.idInmueble} value={i.idInmueble}>
    	      {i.codInmueble}
    	    </option>
    	  ))}
   	 </select>
 	 </div>
	)}

      {estadoCuenta.length > 0 && (
        <>
          <button
            onClick={generarPDF}
            className="mb-4 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            Descargar PDF
          </button>

          <table className="min-w-full border border-gray-300">
            <thead>
              <tr className="bg-gray-200">
                <th className="border p-2">Año</th>
                <th className="border p-2">Periodo</th>
                <th className="border p-2">Local</th>
                <th className="border p-2">Serie</th>
                <th className="border p-2">Comprobante</th>
                <th className="border p-2">F.Emisión</th>
                <th className="border p-2">Importe</th>
                <th className="border p-2">F.Pago</th>
                <th className="border p-2">T.Pago</th>
                <th className="border p-2">Importe Pago</th>
                <th className="border p-2 text-right">Saldo</th>
              </tr>
            </thead>
	   <tbody>
     {estadoCuenta.map((item, idx) => {
      const importeFac = parseFloat(item.importeFac ?? 0);
      const importeCob = parseFloat(item.importeCob ?? 0);
      const saldo = importeFac - importeCob;

      return (
        <tr key={idx}>
          <td className="border p-2 text-center">{item.anio}</td>
          <td className="border p-2 text-center">{item.descPeriodo}</td>
          <td className="border p-2 text-center">{item.codInmueble}</td>
          <td className="border p-2 text-center">{item.nroSerie}</td>
          <td className="border p-2 text-center">{item.nroComprob}</td>
          <td className="border p-2 text-center">{formatearFecha(item.fechaEmision)}</td>
          <td className="border p-2 text-right">{importeFac.toFixed(2)}</td>
          <td className="border p-2 text-center">{formatearFecha(item.fechaCob)}</td>
          <td className="border p-2 text-center">{item.tipoPago}</td>
          <td className="border p-2 text-right">{importeCob.toFixed(2)}</td>
          <td className="border p-2 text-right">{saldo.toFixed(2)}</td> {/* 👈 saldo calculado */}
        </tr>
      );
    })}
  </tbody>
</table>
        </>
      )}
    </div>
  );
}
